<?php
/**
 * @file
 * Code for the GSB Feature Alumni Reunion Agenda Item Content Type feature.
 */

include_once 'gsb_feature_alumni_reunion_agenda_item_ct.features.inc';

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_field_extra_fields() {

  $extra['node']['alumni_reunion_agenda_item']['display']['current_reunion_block'] = array(
    'label' => t('Current Reunion'),
    'description' => t('Current Reunion'),
    'weight' => 30,
  );

  $extra['node']['alumni_reunion_agenda_item']['display']['conditional_stanford_block'] = array(
    'label' => t('Conditional Stanford'),
    'description' => t('Conditional Stanford'),
    'weight' => 31,
  );

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_node_view($node, $view_mode, $langcode) {
  // If this field is not configured for this view mode, skip it.
  $fields = field_extra_fields_get_display('node', $node->type, $view_mode);

  if (!empty($fields['current_reunion_block']['visible'])) {
    $entity_type = 'fieldable_panels_pane';
    $entity_id = '13946';
    $entity = entity_load_single($entity_type, $entity_id);
    $render_array = entity_view($entity_type, array($entity_id => $entity));
    $content = render($render_array);

    $node->content['current_reunion_block'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'pane-bundle-links current-reunion-block',
         ),
       ),
       '#children' => $content,
    );
  }

  if (!empty($fields['conditional_stanford_block']['visible'])) {
    if ($node->field_stanford_event['und'][0]['value']) {
      $entity_type = 'fieldable_panels_pane';
      $entity_id = '13926';
      $entity = entity_load_single($entity_type, $entity_id);
      $render_array = entity_view($entity_type, array($entity_id => $entity));
      $content = render($render_array);

      $node->content['conditional_stanford_block'] = array(
        '#type' => 'container',
        '#attributes' => array(
           'class' => array(
            'pane-bundle-links conditional-stanford-block',
           ),
         ),
       '#children' => $content,
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_node_insert($node) {
  _gsb_feature_alumni_reunion_agenda_item_ct_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_node_update($node) {
  _gsb_feature_alumni_reunion_agenda_item_ct_node_save($node);
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_alumni_reunion_agenda_item_ct_node_save($node) {
  // Include the pathauto library.
  module_load_include('inc', 'pathauto');

  // if this is not an agenda item, then...
  if ($node->type != 'alumni_reunion_agenda_item') {
    // ... this is not the node we are looking for
    return;
  }

  $group_nids = array();

  // If the agenda item is exclusive only create aliases for those groups.
  if (!empty($node->field_reunion_group_page_ref['und'])) {
    foreach($node->field_reunion_group_page_ref['und'] as $key => $group) {
      $group_nids[] = $group['target_id'];
    }
  }
  else {
    // DB Query to get list of nids for all group pages with a matching session id.
    $results = db_query(
      "Select entity_id from {field_data_field_reunion_session_ref} where field_reunion_session_ref_target_id = " . $node->field_alumni_session_ref['und'][0]['target_id'] . " AND bundle = 'alumni_reunion_group_page'"
    );
    foreach ($results as $record) {
      $group_nids[] = $record->entity_id;
    }
  }

  // Get the session title and clean it for urls.
  $session_nid = $node->field_alumni_session_ref['und'][0]['target_id'];
  $session_node = node_load($session_nid);
  $path = pathauto_cleanstring($session_node->title);

  // Clean the node title.
  $path .= '/' . pathauto_cleanstring($node->title);

  // Loop through the group nodes and create aliases.
  foreach ($group_nids as $group_nid) {
    // Get the alias of the group page.
    $alias_path = drupal_get_path_alias('node/' . $group_nid) . '/' . $path;

    // Check to see if a path alias exists, if not then save it.
    $path_info = path_load(array('alias' => $alias_path));
    if (empty($path_info)) {
      $edit = array(
        'source'   => 'node/' . $node->nid,
        'alias'    => $alias_path,
      );
      path_save($edit);
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_field_formatter_info() {
  return array(
    'gsb_feature_alumni_reunion_agenda_item_ct_date_formatter' => array(
      'label' => t('Custom alumni date formatter'),
      'field types' => array('date', 'datestamp', 'datetime'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view(). This code just passes straight
 */
function gsb_feature_alumni_reunion_agenda_item_ct_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $db_format = date_type_format($field['type']);
    $date = new DateObject($item['value'], $item['timezone_db'], $db_format);
    $timezone = isset($item['timezone']) ? $item['timezone'] : '';
    $timezone = timezone_open(date_get_timezone($field['settings']['tz_handling'], $timezone));
    date_timezone_set($date, $timezone);

    $month_day_year = date_format_date($date, 'custom', 'l, F j, Y');
    $time = date_format_date($date, 'custom', 'g:ia');

    if (isset($item['value2'])) {
      $date2 = new DateObject($item['value2'], $item['timezone_db'], $db_format);
      date_timezone_set($date2, $timezone);
      if (date_format_date($date, 'custom', 'Y-m-d') == date_format_date($date2, 'custom', 'Y-m-d')) {
        // Same date with a time range
        $time2 = date_format_date($date2, 'custom', 'i') !== '00' ? date_format_date($date2, 'custom', 'g:ia') : date_format_date($date2, 'custom', 'g:ia');
        if ($time2 != $time) {
          $time .= ' - ' . $time2;
        }
        $output = '<div class="alumni-reunion-agenda-item-date"><div class="date">' . $month_day_year . '</div><div class="time">' . $time . '</div></div>';
      }
      else {
        // Range of dates
        $time2 = date_format_date($date2, 'custom', 'i') !== '00' ? date_format_date($date2, 'custom', 'g:ia') : date_format_date($date2, 'custom', 'g:ia');
        $month_day_year2 = date_format_date($date2, 'custom', 'l, F j, Y');
        $output = '<div class="alumni-reunion-agenda-item-date"><div class="date">' . $month_day_year . ' - ' . $month_day_year2 . '</div><div class="time">' . $time . ' - ' . $time2 . '</div></div>';
      }
    }
    else {
      $output = '<div class="alumni-reunion-agenda-item-date"><div class="date">' . $month_day_year . '</div><div class="time">' . $time . '</div></div>';
    }
    $elements[$delta] = array(
      '#markup' => $output,
    );
  }
  return $elements;
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function gsb_feature_alumni_reunion_agenda_item_ct_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {

  if ($context['bundle'] == 'alumni_reunion_agenda_item') {

    // Hide the group label if there is more than one group.
    if (isset($layout_render_array['left'])) {
      foreach ($layout_render_array['left'] as $key => $field_info) {
        if ($field_info['#field_name'] == 'field_reunion_group_page_ref' && count($field_info['#items']) > 1) {
          $layout_render_array['left'][$key]['#access'] = FALSE;
          break;
        }
      }
    }
    elseif (isset($layout_render_array['right'])) {
      foreach ($layout_render_array['right'] as $key => $field_info) {
        if ($field_info['#field_name'] == 'field_reunion_group_page_ref' && count($field_info['#items']) > 1) {
          $layout_render_array['right'][$key]['#access'] = FALSE;
          break;
        }
      }
    }
    elseif (isset($layout_render_array['ds_content'])) {
      foreach ($layout_render_array['ds_content'] as $key => $field_info) {
        if ($field_info['#field_name'] == 'field_reunion_group_page_ref' && count($field_info['#items']) > 1) {
          $layout_render_array['ds_content'][$key]['#access'] = FALSE;
          break;
        }
      }
    }

    if ($context['view_mode'] == 'alumni_reunion_agenda_list') {

      // Set the url path to be specific to the current group.

      // Get the alias of the group.
      $group_nid = arg(1);
      $group_alias = drupal_lookup_path('alias', "node/" . $group_nid);
      $node = node_load($group_nid);
      $language = $node->language;

      // Get the alias of the session.
      $session_nid = $node->field_reunion_session_ref[$language][0]['target_id'];
      $session_alias = drupal_lookup_path('alias', "node/" . $session_nid);
      $session_alias = explode('/', $session_alias);

      // Combine them and replace the path to alumni/reunions with the correct
      // path.
      $alias = $group_alias . '/' . $session_alias[1];
      foreach($layout_render_array['ds_content'] as $field_index => $field_info) {
        if ($field_info['#field_name'] == 'title') {
          $pos = strpos($layout_render_array['ds_content'][$field_index][0]['#markup'], $alias);
          if ($pos === false) {
            $layout_render_array['ds_content'][$field_index][0]['#markup'] = str_replace('alumni/reunions', $alias, $layout_render_array['ds_content'][$field_index][0]['#markup']);
          }
          break;
        }
      }
    }
  }
}
